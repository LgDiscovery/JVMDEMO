jps查看当前jvm运行的进程
javap -v -p xxx.class java反编译将字节码文件解析 > test.txt

jvm的生命周期：
虚拟机的启动： java虚拟机的启动是通过引导类加载器（bootstrap classLoader）创建一个初始化类（initial class）
来完成的，这个类是由虚拟机的具体实现指定。
虚拟机的执行：执行一个所谓的java程序的时候，真真正正在执行的是一个叫做java虚拟机的进程。
虚拟机的退出：程序正产（或异常）结束 由于系统错误导致java虚拟机进程终止 某线程调用Runtime类或System类的exit方法
或Runtime类的halt方法，并且Jav安全管理器也允许这次exit或者halt操作

都有哪些虚拟机：                             ---------无方法区---------
sun classic VM / exact VM / HotSpot VM  / JRoict VM  / IBM j9 VM

加载的类信息存放于一块称为方法区的内存空间。除类的信息外，方法区还会存放运行时常量池信息，可能还包括字符串字面量和
数字常量（这部分信息是Class文件常量池部分的内存映射）

一、类加载子系统
1 类加载过程
             验证             准备            解析
Loading ---> Verification--->Preparation--->Resolution-->Initalization
加载        ------------------链接------------------------  初始化

加载：
1.1 通过一个类的权限定名获取定义此类的二进制字节流
1.2 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构（运行时数据区）
方法区 1.7以前 永久代  之后：元数据，元空间
1.3 在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口

链接：
1、验证
1.1.1 目的在于确保Class文件的字节码中包含信息符合当前虚拟机的要求，保证被加载类的正确性不会危害虚拟机自身安全
主要包括四种验证:文件格式验证，元数据验证，字节码验证，符号引用验证。
2、准备
2.1.1 为类变量分配内存并且设置该类变量的默认初始值，即零值。
这里不包含用final修饰的static，因为final在编译时就会分配，准备阶段会显式初始化
这里不会为实例变量分配和初始化，类变量会分配在方法区，而实例变量是会随着对象一起分配到java堆中
3、解析
将常量池内的符号引用转换为直接引用的过程
事实上，解析操作往往会随着jvm在执行完初始化之后在执行
解析动作主要是准对类或接口、字段、类方法、接口方法、方法类型等 对应常量池中的
CONSTANT_CLASS_INFO CONSTANT_FIELDREF_INFO CONSTANT_METHODREF_INFO

初始化
1.1 初始化阶段就是执行类的构造器方法<clinit>的过程
此方法不需要定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来
构造器方法中指令按语句在源代码中出现的顺序执行
<clinit>()不同于类的构造器（关联：构造器是虚拟机视角下的<init>()）
若该类具有父类，jvm会保证子类的<clinit>（）执行前，父类的<clinit>（）已经执行完毕
虚拟机必须保证一个类的<Clinit>（）方法在多线程下被同步加锁。


二、运行时数据区 Runtime  data area
Method Area 1.8 使用本地内存了 元空间  1.7还是在内存中 永久代

1、程序计数器（PC 寄存器）：PC寄存器用来存储指向下一条指令的地址，也即将要执行的指令代码，由执行引擎读取下一条指令。
线程私有 它是唯一一个在java虚拟机规范中没有任何的OutOtMemoryError情况的区域。

面试题：
1.1.使用PC寄存器存储字节码指令地址有什么用，为什么使用PC寄存器记录当前线程的执行地址？
因为CPU需要不停的切换各个线程，这时候切换回来以后，就知道接着从那开始继续执行。
JVM的字节码解释器就需要通过改变PC寄存器的值来明确下一条应该执行什么样的字节码指令。
1.2.为什么PC寄存器被设置为私有的？
CPU会不停的做任务切换，这样必然导致经常中断或恢复，为了能够准确的记录各个线程正在执行的当前字节码指令地址，最好的办法就是
为每一个线程都分配一个PC寄存器。

2、栈 （Stack Area）
栈是运行时的单位，堆是存储的单位
Java虚拟机栈是什么：Java虚拟机栈，早期也叫Java栈。每一个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧
（Stack Frame）,对应着一次次的java方法调用。
是线程私有的。
生命周期和线程一致。
主管java程序的运行，它保存方法的局部变量（8中基本数据类型，对象的引用地址）、部分结果，并参与方法的调用和返回。
栈的特点： 栈是一种快速有效的分配存储方式，访问速度仅次于程序计数器
jvm直接对java栈的操作只有两个： 每个方法执行，伴随着进栈（入栈，压栈） 执行结束后的出栈工作
对于栈来说不存在垃圾回收问题 GC OOM 栈存在OOM内存溢出 但不需要垃圾回收

面试题：开发中遇到的异常有哪些？
java虚拟机规范允许java栈的大小是动态的或者是国定不变的。
如果采用固定大小的java虚拟机栈，那每一个线程请求分配的栈容量超过java虚拟机栈允许的最大容量，java虚拟机将会抛出一个
StackOverFlowError异常。
如果java虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存
去创建对应的虚拟机栈，那么java虚拟机将会抛出一个OutOfMemoryError异常

设置栈内存大小  -Xss 来设置线程的最大栈空间，栈的大小直接决定了函数调用的最大可达深度。
VM options
-Xss1m
-Xss1024k
-Xss1048576

栈中存储什么？
每个线程都有自己的栈，栈中的数据都是以栈帧（Stack Frame）的格式存在。
在这个线程上正在执行的每个方法都各自对应一个栈帧
栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息。

栈帧的内部结构
2.1.局部变量表（Local Variables）
局部变量表也称为局部变量数组或者本地变量表
定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量。这些类型包括各类基本数据类型，对象引用，以及returnAddress类型。
由于局部变量表是建立在线程的栈上，是线程私有数据，因此不存在数据安全问题。
局部变量表所需的容量大小是在编译期确定下来的，并且保存在方法的code属性的maximum local variables数据项中。在方法运行期间是不会改变局部变量表的大小的。
局部变量表中的变量只在当前方法有效
JVM会为局部变量表中的每一个slot都分配一个防问索引，通过索引即可成功防问到局部变量表中指定的局部变量值。
局部变量表，最基本的存储单元是Slot(变量槽)，32位占一个槽，（double、long）64位占两个槽，应用类型占一个槽
-----------------------
索引  类型    参数
0    int     int k
1    long    long m

3    float    float p
4    double   double q

6   reference  object t
-------------------------
如果需要访问局部变量表中一个64bit的局部变量值时，只需要使用前一个索引即可。
如果当前栈帧是由构造方法或者实例方法创建的，那么该对象引用this将会存放在index为0的solt处，其余的参数按照参数表顺序继续排列。
$$局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或者间接引用的对象都不会被回收。$$
（自己总结：局部变量表-->slot的数组结构 slot存数字）
/*
    变量的分类：按照数据类型分：① 基本数据类型  ② 引用数据类型
              按照在类中声明的位置分：① 成员变量：在使用前，都经历过默认初始化赋值
                                                类变量： linking的prepare阶段：给类变量默认赋值  ---> initial阶段：给类变量显式赋值即静态代码块赋值
                                                实例变量：随着对象的创建，会在堆空间中分配实例变量空间，并进行默认赋值
                                 ② 局部变量：在使用前，必须要进行显式赋值的！否则，编译不通过
*/

2.2.操作数栈(Operand Stack)
栈：可以使用数组、链表来实现 （jvm 操作数栈是用数组实现）
操作数栈，在方法的执行过程中（指令执行过程中），根据字节码指令，往栈中写入数据或者提取数据，即入栈（Push）/ 出栈（pop）
操作数栈，主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间。
操作数栈并非采用访问索引的方式来进行数据的访问的，而是只能通过标准的入栈和出栈操作来完成一次数据访问
编译期就确定栈的深度存在code属性中，为max_stack的值
如果被调用的方法带有返回值的话，其返回值将会被压入当前栈帧的操作数栈中。
 /*
    程序员面试过程中， 常见的i++和++i 的区别，
    通过字节码角度解释。

*/
    public void add(){
        //第1类问题：
        int i1 = 10;
        i1++;

        int i2 = 10;
        ++i2;

        //第2类问题：
        int i3 = 10;
        int i4 = i3++;

        int i5 = 10;
        int i6 = ++i5;

        //第3类问题：
        int i7 = 10;
        i7 = i7++;

        int i8 = 10;
        i8 = ++i8;

        //第4类问题：
        int i9 = 10;
        int i10 = i9++ + ++i9;
    }
2.3.动态链接（Dynamic Linking）(或指向运行时常量池《存放在方法区中》的方法引用)

2.4.方法返回地址（Return Address）(或方法正常退出或异常退出的定义)
返回指令包含ireturn（当返回值是boolean、byte、char、short和int类型时使用）、
lreturn、freturn、dreturn以及areturn，另外还有一个return指令供声明为void的方法、
实例初始化方法、类和接口的初始化方法使用。
2.5.一些附加信息
（帧数据区有些书找中说的就是：动态链接+方法返回地址+一些附加信息）

面试题(关于栈)？
举例栈溢出的情况？ stackOverFlowError
通过-Xss设置栈的大小  OutOfMemoryError
调整栈大小，就能保证不出现溢出吗？ 不能
分配的栈内存越大越好吗？ 不是
垃圾回收是否涉及到虚拟机栈？ 不会的
                  Error     GC     线程私有、共有
Method Area        yes      yes     共有
Heap               yes      yes     共有
PC Register        NO        NO     私有
Stack              yes       NO     私有
local Stack        yes       NO     私有
方法中定义的局部变量是否线程安全？
/**
 * 方法中定义的局部变量是否线程安全？具体情况具体分析
 *
 *   何为线程安全？
 *      如果只有一个线程才可以操作此数据，则必是线程安全的。
 *      如果有多个线程操作此数据，则此数据是共享数据。如果不考虑同步机制的话，会存在线程安全问题。
 */
public class StringBuilderTest {

    int num = 10;

    //s1的声明方式是线程安全的
    public static void method1(){
        //StringBuilder:线程不安全
        StringBuilder s1 = new StringBuilder();
        s1.append("a");
        s1.append("b");
        //...
    }
    //sBuilder的操作过程：是线程不安全的
    public static void method2(StringBuilder sBuilder){
        sBuilder.append("a");
        sBuilder.append("b");
        //...
    }
    //s1的操作：是线程不安全的
    public static StringBuilder method3(){
        StringBuilder s1 = new StringBuilder();
        s1.append("a");
        s1.append("b");
        return s1;
    }
    //s1的操作：是线程安全的
    public static String method4(){
        StringBuilder s1 = new StringBuilder();
        s1.append("a");
        s1.append("b");
        return s1.toString();
    }

    public static void main(String[] args) {
        StringBuilder s = new StringBuilder();


        new Thread(() -> {
            s.append("a");
            s.append("b");
        }).start();

        method2(s);

    }

}

3、本地方法栈 Native Method Stack
本地方法：一个Native Method 就是一个Java调用一个非Java方法
java虚拟机栈用于管理java方法的调用，而本地方法用于管理本地方法的调用
本地方法栈也是线程私有

4、堆 Heap (查看chapter08理解)
一个jvm实例只存在一个堆内存。堆也是java内存管理的核心区域。
堆内存的大小可以调节
在方法结束后，堆中的对象不会马上被移除，仅仅在垃圾收集的时候才会被移除。
 （GC 时需要用户线程 stop the world ）

vm options
-Xms10m -Xmx10m

jvm 启动的时候堆就会被创建，大小也会被固定。

TLAB(为每一个线程分配一个堆的内存区域，提高并发效率)
为什么有TLAB(Thread Local Allocation Buffer)
堆区是线程共享区域，任何线程都可以访问到堆区中的共享数据
由于对象实例化的创建在JVm中非常频繁，因此在并发环境下从堆区中划分内存空间是线程不安全的
为避免多个线程操作同一地址，需要使用加锁等机制，进而影响分配速度。
-XX:UseTLAB参数是否开启的情况:默认情况是开启的
jps 查看进程id / jinfo -flag UseTLAB 进行Id

现代垃圾收集算法大部分都基于分代收集算法设计，
堆空间细分：
java7以前 新生代+养老区+永久代
java8以后 新生代+养老区代+元空间

/**
 * 1. 设置堆空间大小的参数
 * -Xms 用来设置堆空间（年轻代+老年代）的初始内存大小
 *      -X 是jvm的运行参数
 *      ms 是memory start
 * -Xmx 用来设置堆空间（年轻代+老年代）的最大内存大小
 *
 * 2. 默认堆空间的大小
 *    初始内存大小：物理电脑内存大小 / 64
 *             最大内存大小：物理电脑内存大小 / 4
 * 3. 手动设置：-Xms600m -Xmx600m
 *     开发中建议将初始堆内存和最大的堆内存设置成相同的值。
 *
 * 4. 查看设置的参数：方式一： jps 查看当前运行的进程id  /  jstat -gc 进程id 查看进程的内存分配
 *                  方式二：-XX:+PrintGCDetails
 * @author shkstart  shkstart@126.com
 * @create 2020  20:15
 */
public class HeapSpaceInitial {
    public static void main(String[] args) {

        //返回Java虚拟机中的堆内存总量
        long initialMemory = Runtime.getRuntime().totalMemory() / 1024 / 1024;
        //返回Java虚拟机试图使用的最大堆内存量
        long maxMemory = Runtime.getRuntime().maxMemory() / 1024 / 1024;

        System.out.println("-Xms : " + initialMemory + "M");
        System.out.println("-Xmx : " + maxMemory + "M");

//        System.out.println("系统内存大小为：" + initialMemory * 64.0 / 1024 + "G");
//        System.out.println("系统内存大小为：" + maxMemory * 4.0 / 1024 + "G");

        try {
            Thread.sleep(1000000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

年轻代 YongGen                         老年代 OldGen   1:2
Eden  s0  s1
8:1:1
/**
 * -Xms600m -Xmx600m
 *
 * -XX:NewRatio ： 设置新生代与老年代的比例。默认值是2.
 * -XX:SurvivorRatio ：设置新生代中Eden区与Survivor区的比例。默认值是8
 * -XX:-UseAdaptiveSizePolicy ：关闭自适应的内存分配策略  （暂时用不到）
 * -Xmn:设置新生代的空间的大小。 （一般不设置）
 */

Eden    survivor1  survivor 2       Tenured
new -->       ----15x---------->
       Minor GC                     Major GC  Full GC

JVM在进行GC时，并非每次都对上面三个内存（新生代，老年代，方法区）区域一起回收的，大部分时候回收的都是指新生代
准对HotSpot VM的实现，它里面的GC按照回收区域又分为两大类型：
一种是部分收集（Partial GC）,一种是整堆收集（Full GC）
1、部分收集： 不是完整收集整个java堆的垃圾收集：其中又分为：
 1.1、新生代收集：（Minor GC / Young GC）：只是新生代的垃圾收集
 1.2、老年代收集：（Major GC / old GC）：只是老年代的垃圾收集
        目前，只有CMS GC会单独收集老年代的行为
        注意很多时候Major GC会和Full GC混淆使用，需要具体分辨是老年代回收还是整堆回收。
 1.3、混合收集：（Mixed GC）：收集整个新生代以及部分老年代的垃圾收集
        目前，只有G1 GC会有这样的行为
2、整堆收集（Full GC）:收集整个java堆和方法区的垃圾收集

Minor GC会引发STW,暂停其他用户的线程，等垃圾回收结束，用户线程才恢复运行。
触发GC条件
Eden区满了就会触发MinorGC
Major GC：空间不足触发，首先尝试触发Minor GC。如果之后空间还不足，则触发Major GC
Major GC的速度一般会比Minor GC慢10倍，STW的时间更长。
如果Major GC后内存还不足，就报OOM了
Full GC触发机制 ：
1 调用System.gc()时，系统建议执行Full GC，但是不必然执行
2 老年代空间不足 方法区空间不足
3 通过Minor GC后进入老年代的平均大小大于老年代的可用内存
5 eden区，survivor space0(From Space)区向survivor space1(to space)区复制时，对象大小大于To space可用内存，则把对象转存到
老年代，且老年代的可用内存小于该对象大小。
说明：full gc是开发中或调优中尽可能要避免的。这样暂停时时间会短一些。

survivor区满了不会触发GC 特殊情况会直接放到老年代
/** 测试：大对象直接进入老年代
 * -Xms60m -Xmx60m -XX:NewRatio=2 -XX:SurvivorRatio=8 -XX:+PrintGCDetails
 * @author shkstart  shkstart@126.com
 * @create 2020  21:48
 */
public class YoungOldAreaTest {
    public static void main(String[] args) {
        byte[] buffer = new byte[1024 * 1024 * 20];//20m

    }
}
第一次
Eden区满了就会触发MinorGC<通过算法判断那些是垃圾，进行回收,不是垃圾的放到s0区>
so区也会被回收
第二次
so区的对象也要判断是垃圾，不是就会放到s1区
再一次触发《YGC》MinorGc<通过算法判断那些是垃圾，进行回收,不是垃圾的放到s1区>
 ：：：
 ：：：  15次 默认
 ：：：
 第n次
可设置参数 -XX:MaxTenuringThreshold=<N> 进行设置去老年代的阈值

常用的调优工具
JDK命令行
Eclipse:Memory Analyzer Tool
Jconsole
VisualVM
Jprofiler
Java Flight Recorder
GCViewer
GC Easy

小结堆空间的参数设置
/**
 * 测试堆空间常用的jvm参数：
 * -XX:+PrintFlagsInitial : 查看所有的参数的默认初始值
 * -XX:+PrintFlagsFinal  ：查看所有的参数的最终值（可能会存在修改，不再是初始值）
 *      具体查看某个参数的指令： jps：查看当前运行中的进程
 *                             jinfo -flag SurvivorRatio 进程id
 *
 * -Xms：初始堆空间内存 （默认为物理内存的1/64）
 * -Xmx：最大堆空间内存（默认为物理内存的1/4）
 * -Xmn：设置新生代的大小。(初始值及最大值)
 * -XX:NewRatio：配置新生代与老年代在堆结构的占比
 * -XX:SurvivorRatio：设置新生代中Eden和S0/S1空间的比例
 * -XX:MaxTenuringThreshold：设置新生代垃圾的最大年龄
 * -XX:+PrintGCDetails：输出详细的GC处理日志
 * 打印gc简要信息：① -XX:+PrintGC   ② -verbose:gc
 * -XX:HandlePromotionFailure：是否设置空间分配担保
 *
 */
堆是分配对象的唯一选择吗？ 不在唯一了
随着JIT编译期的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所以的对象都分配到堆上也渐渐的变得不是那么绝对了。
在java虚拟机中，对象是在Java堆中分配内存的，这是一个普遍的常识。但是，有一种特殊情况，那就是如果经过逃逸分析（Escape Analysis）
后发现，一个对象并没有逃逸出方法的话，那么就可能被优化成栈上分配。这样就无需再对堆上分配内存，也无需进行垃圾回收了。
这就是常见的堆外存储技术。
通过逃逸分析，Java Hotspot编译期能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上。
逃逸分析的基本行为就是分析对象动态作用域：
当一个对象在方法中被定义后，对象只在方法内部使用，则认为没有发生逃逸。
当一个对象在方法中被定义后，它被外部方法所引用，则认为发生逃逸。例如作为调用参数专递到其他地方中。
/**
   如何将堆上的对象分配到栈，需要使用逃逸分析手段。
 * 逃逸分析
 *  如何快速的判断是否发生了逃逸分析，
    大家就看new的对象实体是否有可能在方法外被调用。
    1.7 jdk 之后，HotSpot中默认就已经开启了逃逸分析。
    如果使用的是比较早的版本，开发人员可以通过：
    -XX:+DoEscapeAnalysis 显示的开启逃逸分析
    通过 -XX:+PrintEscapeAnalysis查看逃逸分析的筛选结果
    jps 查看进程id / jinfo -flag DoEscapeAnalysis 进行Id

    代码优化---》（技术还不成熟 ）
        一、栈上分配：将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会逃逸。对象可能是占上分配的候选，而不是堆分配。
        二、同步省略：如果一个对象被发现只能从一个线程被访问，那么对于这个对象的操作可以不考虑同步。
        三、分离对象或标量替换：有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分（或全部）可以并不储存在内存，而是存储在CPU寄存器中。
 */
5、方法区 （Method area）
栈 堆 方法区的交互关系
.class
  方法区        java栈       java堆
  Person     person    =  new Person();

person java栈上的局部变量表中的引用reference地址 这个地址指向java堆中的Person对象实例数据区域，这个实例对象区域的头部有
指向方法区的对象类型数据的指针地址。

方法区的理解
java虚拟机规范：中明确说明：’尽管所有的方法区在逻辑上是属于堆的一部分，但是一些简单的实现可能不会选择去进行垃圾回收或进行压缩‘
HotSpotJVM而言，方法区还有一个别名叫做NON_heap（非堆)。
所以方法区看做是一块独立于java堆的内存空间

设置方法区的大小与OOM
1.7及以前
-XX:PermSize  默认是20.75M
-XX:MaxPermSize  默认是82M
1.8
-XX:MetaspaceSize=100m
-XX:MaxMetaspaceSize=100m
OOM: 加载大量的第三方库，或者Tomcat部署了（30-50）个项目，利用反射动态的生产大量的代理类。
方法区的内部结构
存储：类型信息（类加载器信息，域Filed信息，方法信息(抽象方法和本地方法除外)）  运行时常量池，常量、静态变量，即时编译器编译后的代码缓存
之后有变过一些信息的存储
常量池：可以看做是一张表，虚拟机指令根据这张常量表找到要执行的类名，方法名，参数类型，字面量等类型。
方法区的演进与垃圾回收
1.7 及以前 习惯把方法区，称为永久代 叫 PermGen space 在虚拟机内存
1.8 叫 Metaspace 元空间  在本地内存不在虚拟机内存 hotspot JRockit j9

jdk1.6及以前： 有永久代，静态变量存放在永久代上
jdk1.7：有永久代，但已经逐步”去永久代“,字符串常量池，静态变量移除，保存在堆中
jdk1.8及以后：无永久代，类型信息，字段，方法，常量保存在本地内存的元空间，但字符串常量池，静态变量仍然在堆中。
运行时数据区结构图
                                    内存区域
            ---------------------------_----------------------------
            线程共享 ------------------ ThreadLocal ----------------线程私有
 -------------_-------                                 ______________-_____________
堆                  元空间                              虚拟机栈       本地方法栈     程序计数器(没有异常，没有GC)
|                       |                                   \         /
|                    OutOfMemoryError:Metaspace          StackOverflowError(有异常，没有GC)
OutOfMemoryError:java heap space
有异常，有GC

面试题：StringTable为什么要调整？
jdk7中将StringTable放到堆空间中。因为永久代的回收效率很低，在full gc的时候才会触发。
而full gc是老年代的空间不足，永久代不足才会触发。这就导致StringTable回收效率不高，
而我们开发中会有大量的字符串被创建，回收效率低，导致永久代内存不足。放到堆里，能即时回收内存。
